{
	"info": {
		"_postman_id": "dbf519c3-1871-4d3a-89c0-b5aefef3f7a0",
		"name": "Task_2_Spoonacular",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20505692"
	},
	"item": [
		{
			"name": "recipes_Get",
			"item": [
				{
					"name": "Search Recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expected result - 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var numberData = jsonData.number;\r",
									"    console.log(numberData);\r",
									"    console.log(numberData == pm.variables.get(\"Expected_result\"));\r",
									"    pm.expect(numberData == pm.variables.get(\"Expected_result\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Expected result Fat < maxFat\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var maxFatData = pm.variables.get(\"maxFat\");\r",
									"    var resultFatData = jsonData.results[0].nutrition.nutrients[0]['amount'];\r",
									"    console.log(resultFatData < maxFatData);\r",
									"    pm.expect(resultFatData < maxFatData).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/complexSearch?query=pasta&maxFat={{maxFat}}&number={{Expected_result}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"complexSearch"
							],
							"query": [
								{
									"key": "query",
									"value": "pasta"
								},
								{
									"key": "maxFat",
									"value": "{{maxFat}}"
								},
								{
									"key": "number",
									"value": "{{Expected_result}}"
								}
							]
						},
						"description": "Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint."
					},
					"response": []
				},
				{
					"name": "Search Recipes by Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Number of recipes returned = 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var numberData = pm.variables.get(\"number_returned\");\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        console.log(jsonData[i]);\r",
									"        arr[i] = jsonData[i];\r",
									"    }\r",
									"    console.log(arr.length == numberData);\r",
									"    pm.expect(arr.length == numberData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/findByIngredients?ingredients=carrots,tomatoes&number={{number_returned}}&limitLicense=true&ranking=2&ignorePantry=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"findByIngredients"
							],
							"query": [
								{
									"key": "ingredients",
									"value": "carrots,tomatoes",
									"description": "A comma-separated list of ingredients that the recipes should contain."
								},
								{
									"key": "number",
									"value": "{{number_returned}}",
									"description": "The maximum number of items to return (between 1 and 100). Defaults to 10."
								},
								{
									"key": "limitLicense",
									"value": "true",
									"description": "Whether the recipes should have an open license that allows display with proper attribution."
								},
								{
									"key": "ranking",
									"value": "2",
									"description": "Whether to maximize used ingredients (1) or minimize missing ingredients (2) first."
								},
								{
									"key": "ignorePantry",
									"value": "true",
									"description": "Whether to ignore typical pantry items, such as water, salt, flour, etc."
								}
							]
						},
						"description": "\nEver wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).\n        "
					},
					"response": []
				},
				{
					"name": "Search Recipes by Nutrients Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Amount of carbohydrates carbs > minCarbs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var minCarbsData = pm.variables.get(\"minCarbs\");\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        console.log(jsonData[i]);\r",
									"        arr[i] = jsonData[i];\r",
									"    }\r",
									"    for (let i = 0; i < arr.length; i++) {\r",
									"        var carbs = arr[i].carbs.slice(0, -1);\r",
									"        console.log(carbs);\r",
									"        console.log(carbs >= minCarbsData);\r",
									"        pm.expect(carbs >= minCarbsData);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Amount of carbohydrates carbs < maxCarbs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var maxCarbsData = pm.variables.get(\"maxCarbs\");\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        console.log(jsonData[i]);\r",
									"        arr[i] = jsonData[i];\r",
									"    }\r",
									"    for (let i = 0; i < arr.length; i++) {\r",
									"        var carbs = arr[i].carbs.slice(0, -1);\r",
									"        console.log(carbs);\r",
									"        console.log(carbs <= maxCarbsData);\r",
									"        pm.expect(carbs <= maxCarbsData);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/findByNutrients?minCarbs={{minCarbs}}&maxCarbs={{maxCarbs}}&number=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"findByNutrients"
							],
							"query": [
								{
									"key": "minCarbs",
									"value": "{{minCarbs}}"
								},
								{
									"key": "maxCarbs",
									"value": "{{maxCarbs}}"
								},
								{
									"key": "number",
									"value": "2"
								}
							]
						},
						"description": "Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients."
					},
					"response": []
				},
				{
					"name": "Get Recipe Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recipe Id = 715538\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var idData = jsonData.id;\r",
									"    console.log(idData);\r",
									"    pm.expect(idData == pm.variables.get(\"recipeInfoId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/information?includeNutrition=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"information"
							],
							"query": [
								{
									"key": "includeNutrition",
									"value": "false"
								}
							]
						},
						"description": "Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster."
					},
					"response": []
				},
				{
					"name": "Get Recipe Information Bulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/informationBulk?ids={{recipeInfoId}},716429",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"informationBulk"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{recipeInfoId}},716429"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Similar Recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The number recipes to be returned = 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var recipesData = pm.variables.get(\"Expected_result\");\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        console.log(jsonData[i]);\r",
									"        arr[i] = jsonData[i];\r",
									"    }\r",
									"    console.log(arr.length);\r",
									"    pm.expect(arr.length == recipesData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/similar?number={{Expected_result}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"similar"
							],
							"query": [
								{
									"key": "number",
									"value": "{{Expected_result}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Random Recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The number recipes to be returned = 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var recipesData = pm.variables.get(\"number_returned\");\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.recipes.length; i++) {\r",
									"        arr[i] = jsonData.recipes[i].id;\r",
									"    }\r",
									"    for (let i = 0; i < arr.length; i++) {\r",
									"        console.log(arr[i]);\r",
									"    }\r",
									"    pm.expect(arr.length == recipesData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/random?number={{number_returned}}&tags=vegetarian,dessert",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"random"
							],
							"query": [
								{
									"key": "number",
									"value": "{{number_returned}}"
								},
								{
									"key": "tags",
									"value": "vegetarian,dessert"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Autocomplete Recipe Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Result contains query data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var queryData = pm.variables.get(\"queryToBeAutocompleted\");\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        console.log(jsonData[i]);\r",
									"        arr[i] = jsonData[i];\r",
									"    }\r",
									"    for (let i = 0; i < arr.length; i++) {\r",
									"        var titleData = arr[i].title;\r",
									"        console.log(titleData.includes(queryData));\r",
									"        pm.expect(titleData).to.include(queryData);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/autocomplete?number=10&query={{queryToBeAutocompleted}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"autocomplete"
							],
							"query": [
								{
									"key": "number",
									"value": "10"
								},
								{
									"key": "query",
									"value": "{{queryToBeAutocompleted}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Taste by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/tasteWidget.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"tasteWidget.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Equipment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json;charset=utf-8\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/equipmentWidget.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"equipmentWidget.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Extract Recipe from Website",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData.sourceUrl);\r",
									"    pm.expect(jsonData.sourceUrl).to.eql(\"https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/extract?url=https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"extract"
							],
							"query": [
								{
									"key": "url",
									"value": "https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Summarize Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"What to make for dinner tonight?? Bruschetta Style Pork & Pasta\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(715538);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spoonacular.com/recipes/{{recipeInfoId}}/summary",
							"protocol": "https",
							"host": [
								"api",
								"spoonacular",
								"com"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze a Recipe Search Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recipe contains ingredient fusilli\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ingredients[0].include).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"The recipe does not contain an ingredient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ingredients[1].include).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/queries/analyze?q=salmon+with+fusilli+and+no+nuts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"queries",
								"analyze"
							],
							"query": [
								{
									"key": "q",
									"value": "salmon+with+fusilli+and+no+nuts"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Guess Nutrition by Dish Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/guessNutrition?title=Spaghetti+Aglio+et+Olio",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"guessNutrition"
							],
							"query": [
								{
									"key": "title",
									"value": "Spaghetti+Aglio+et+Olio"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recipe Nutrition Label Widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is text/html;charset=utf-8\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/nutritionLabel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"nutritionLabel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recipe Nutrition Label Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is image/png\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('image/png');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/nutritionLabel.png",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"nutritionLabel.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Recipe Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recipe map creation status - success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData.status);\r",
									"    pm.expect(jsonData.status).to.be.eql(\"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/card",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"card"
							]
						}
					},
					"response": []
				},
				{
					"name": "Price Breakdown by ID Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Length header is 16414\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Length')).to.eql('16414');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/priceBreakdownWidget.png",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"priceBreakdownWidget.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Analyzed Recipe Instructions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipeInfoId}}/analyzedInstructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipeInfoId}}",
								"analyzedInstructions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Convert Amounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.answer).to.eql(\"2.5 cups flour translates to 312.5 grams.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/convert?ingredientName=flour&sourceAmount=2.5&sourceUnit=cups&targetUnit=grams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"convert"
							],
							"query": [
								{
									"key": "ingredientName",
									"value": "flour"
								},
								{
									"key": "sourceAmount",
									"value": "2.5"
								},
								{
									"key": "sourceUnit",
									"value": "cups"
								},
								{
									"key": "targetUnit",
									"value": "grams"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "recipes_Post",
			"item": [
				{
					"name": "Analyze Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.instructions).to.be.a(\"string\");\r",
									"      pm.expect(jsonData.originalId).to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Spaghetti Carbonara\",\r\n    \"servings\": 2,\r\n    \"ingredients\": [\r\n        \"1 lb spaghetti\",\r\n        \"3.5 oz pancetta\",\r\n        \"2 Tbsps olive oil\",\r\n        \"1  egg\",\r\n        \"0.5 cup parmesan cheese\"\r\n    ],\r\n    \"instructions\": \"Bring a large pot of water to a boil and season generously with salt. Add the pasta to the water once boiling and cook until al dente. Reserve 2 cups of cooking water and drain the pasta. \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/analyze",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze Recipe Instructions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Put the garlic in a pan and then add the onion\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Add some salt and oregano\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.parsedInstructions).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.ingredients).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "instructions",
									"value": "Put the garlic in a pan and then add the onion. Add some salt and oregano",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/analyzeInstructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"analyzeInstructions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parse Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].original).to.eql(\"1 cup green tea\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ingredientList",
									"value": "1 cup green tea",
									"type": "text"
								},
								{
									"key": "servings",
									"value": "1",
									"type": "text"
								},
								{
									"key": "includeNutrition",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/parseIngredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"parseIngredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Classify Grocery Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Kroger Vitamin A & D Reduced Fat 2% Milk\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"title\": \"Kroger Vitamin A & D Reduced Fat 2% Milk\", \"upc\": \"\", \"plu_code\": \"\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/food/products/classify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food",
								"products",
								"classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Classify Cuisine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Pork roast with green beans",
									"type": "text"
								},
								{
									"key": "ingredientList",
									"value": "3 oz pork shoulder",
									"type": "text"
								},
								{
									"key": "language",
									"value": "en",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/cuisine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"cuisine"
							]
						}
					},
					"response": []
				},
				{
					"name": "Map Ingredients to Grocery Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expected result eggs & bacon\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let arr = [];\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        console.log(jsonData[i]);\r",
									"        arr[i] = jsonData[i];\r",
									"    }\r",
									"    console.log(arr[0].original);\r",
									"    console.log(arr[1].original);\r",
									"    pm.expect(arr[0].original).to.eql(\"eggs\");\r",
									"    pm.expect(arr[1].original).to.eql(\"bacon\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"ingredients\": [\"eggs\",\"bacon\"], \"servings\": 2 }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/food/ingredients/map",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food",
								"ingredients",
								"map"
							]
						}
					},
					"response": []
				},
				{
					"name": "Connect User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expected status success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData.status);\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " \t{\"username\": \"cool user\",\r\n    \"firstName\": \"your user's first name\",\r\n    \"lastName\": \"your user's last name\",\r\n    \"email\": \"your user's email\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"connect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ingredients Widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is text/html\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ingredientList",
									"value": "3 oz flour",
									"type": "text"
								},
								{
									"key": "servings",
									"value": "2",
									"type": "text"
								},
								{
									"key": "measure",
									"value": "metric",
									"type": "text"
								},
								{
									"key": "view",
									"value": "grid",
									"type": "text"
								},
								{
									"key": "defaultCss",
									"value": "true",
									"type": "text"
								},
								{
									"key": "showBacklink",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/visualizeIngredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"visualizeIngredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Price Breakdown Widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"<style type=\\\"text/css\\\">\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ingredientList",
									"value": "3 oz flour",
									"type": "text"
								},
								{
									"key": "servings",
									"value": "2",
									"type": "text"
								},
								{
									"key": "mode",
									"value": "1",
									"type": "text"
								},
								{
									"key": "defaultCss",
									"value": "true",
									"type": "text"
								},
								{
									"key": "showBacklink",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/visualizePriceEstimator",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"visualizePriceEstimator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Equipment Widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"<script type=\\\"text/javascript\\\">\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "instructions",
									"value": "Preheat oven. Cut cucumber with a knife and put in a blender.",
									"type": "text"
								},
								{
									"key": "view",
									"value": "grid",
									"type": "text"
								},
								{
									"key": "defaultCss",
									"value": "true",
									"type": "text"
								},
								{
									"key": "showBacklink",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/visualizeEquipment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"visualizeEquipment"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "value",
				"value": "d0d7e63c08c342c0a8a2a29288148249",
				"type": "string"
			},
			{
				"key": "key",
				"value": "apiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.spoonacular.com",
			"type": "string"
		},
		{
			"key": "maxFat",
			"value": "25"
		},
		{
			"key": "number_returned",
			"value": "3"
		},
		{
			"key": "Expected_result",
			"value": "2"
		},
		{
			"key": "minCarbs",
			"value": "10"
		},
		{
			"key": "maxCarbs",
			"value": "50"
		},
		{
			"key": "recipeInfoId",
			"value": "715538",
			"type": "string"
		},
		{
			"key": "queryToBeAutocompleted",
			"value": "chick"
		}
	]
}